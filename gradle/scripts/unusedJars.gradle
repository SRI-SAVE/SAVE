/*
 * Copyright 2016 SRI International
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Finds jar files which aren't referenced by any subproject. Such jar
// files should probably be removed from revision control.

import org.gradle.api.artifacts.repositories.*
task unusedJars() {
    description = "Finds jars which aren't used by any project"
    ext.baseDir = rootDir
    ext.usedJars = new HashSet<File>()
    usedJars.add(file("$rootDir/gradle/wrapper/gradle-wrapper.jar"))
    ext.allJars = new HashSet<File>()
    ext.unusedJars = new HashSet<File>()
    ext.sidecars = [ "-sources", "-javadoc" ]

    doLast {
        // Find all the jars which are actually used.
        rootProject.allprojects.each { proj ->
            proj.configurations.each { conf ->
                conf.resolvedConfiguration.resolvedArtifacts.each { art ->
                    usedJars.add(art.file)
                }
            }
        }
        println("Projects reference " + usedJars.size() + " jars")

        // Find all the jars under our root directory.
        def tree = fileTree(baseDir) {
            include "**/*.jar"
            exclude "**/build/**"
        }
        tree.each { File file ->
            allJars.add(file)
        }
        println("Tree contains " + allJars.size() + " jars")

        allJars.each { File f ->
            def used = false
            if (usedJars.contains(f)) {
                used = true
            }
            sidecars.each { String sidecar ->
                if (f.name.contains(sidecar)) {
                    def name = f.name
                    name = name.replace(sidecar, "")
                    def main = new File(f.parent, name)
                    if (usedJars.contains(main)) {
                        used = true
                    }
                }
            }
            if (!used) {
                unusedJars.add(f)
            }
        }
        println("Found " + unusedJars.size() + " unused jars:")
        unusedJars.sort().each { file ->
            println("    $file")
        }
    }
}
